// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// Models
// ========================================

model Table {
  id         String   @id @default(cuid())
  name       String   @unique
  gameType   GameType @default(CASH)
  smallBlind Decimal  @db.Decimal(10, 2)
  bigBlind   Decimal  @db.Decimal(10, 2)
  maxPlayers Int      @default(10)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  hands Hand[]

  @@index([name])
  @@index([gameType])
}

model Player {
  id            String   @id @default(cuid())
  name          String   @unique
  email         String?  @unique
  totalHands    Int      @default(0)
  totalWinnings Decimal  @default(0) @db.Decimal(12, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  playerInHands PlayerInHand[]
  actions       Action[]

  @@index([name])
  @@index([email])
}

model Hand {
  id         String   @id @default(cuid())
  tableId    String
  handNumber Int
  street     Street   @default(PREFLOP)
  pot        Decimal  @default(0) @db.Decimal(12, 2)
  rake       Decimal  @default(0) @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  table   Table          @relation(fields: [tableId], references: [id], onDelete: Cascade)
  players PlayerInHand[]
  actions Action[]

  @@unique([tableId, handNumber])
  @@index([tableId])
  @@index([createdAt])
}

model PlayerInHand {
  id            String   @id @default(cuid())
  handId        String
  playerId      String
  position      Position
  startingChips Decimal  @db.Decimal(12, 2)
  endingChips   Decimal  @db.Decimal(12, 2)
  cards         String?  // JSON: ["As", "Kh"]
  won           Decimal  @default(0) @db.Decimal(12, 2)
  showedDown    Boolean  @default(false)

  hand   Hand   @relation(fields: [handId], references: [id], onDelete: Cascade)
  player Player @relation(fields: [playerId], references: [id])

  @@unique([handId, playerId])
  @@index([handId])
  @@index([playerId])
  @@index([position])
}

model Action {
  id         String     @id @default(cuid())
  handId     String
  playerId   String
  street     Street
  actionType ActionType
  amount     Decimal    @default(0) @db.Decimal(12, 2)
  sequence   Int
  timestamp  DateTime   @default(now())

  hand   Hand   @relation(fields: [handId], references: [id], onDelete: Cascade)
  player Player @relation(fields: [playerId], references: [id])

  @@unique([handId, sequence])
  @@index([handId])
  @@index([playerId])
  @@index([street])
  @@index([timestamp])
}

// ========================================
// Enums
// ========================================

enum GameType {
  CASH
  TOURNAMENT
  SIT_AND_GO
}

enum Street {
  PREFLOP
  FLOP
  TURN
  RIVER
  SHOWDOWN
}

enum Position {
  SB
  BB
  UTG
  UTG_PLUS_1 @map("UTG+1")
  UTG_PLUS_2 @map("UTG+2")
  MP
  MP_PLUS_1  @map("MP+1")
  HJ
  CO
  BTN
}

enum ActionType {
  FOLD
  CHECK
  CALL
  BET
  RAISE
  ALL_IN
}
